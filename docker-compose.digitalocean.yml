version: '3.8'

services:
  # Config Server
  config-server:
    build: 
      context: .
      dockerfile: ./config-server/Dockerfile
    container_name: logistics-config-server
    ports:
      - "8888:8888"
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT}
    networks:
      - logistics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Discovery Server
  discovery-server:
    build: 
      context: .
      dockerfile: ./discovery-server/Dockerfile
    container_name: logistics-discovery-server
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - EUREKA_INSTANCE_HOSTNAME=${EUREKA_INSTANCE_HOSTNAME}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT}
    networks:
      - logistics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # Gateway Service
  gateway-service:
    build: 
      context: .
      dockerfile: ./gateway-service/Dockerfile
    container_name: logistics-gateway-service
    ports:
      - "8080:8080"
    depends_on:
      discovery-server:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
      - JWT_SECRET=${JWT_SECRET}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT}
    networks:
      - logistics-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Auth Service
  auth-service:
    build: 
      context: .
      dockerfile: ./auth-service/Dockerfile
    container_name: logistics-auth-service
    ports:
      - "8081:8081"
    depends_on:
      gateway-service:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT}
      - LOGGING_LEVEL_COM_LOGISTICS=${LOGGING_LEVEL_COM_LOGISTICS}
    networks:
      - logistics-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # User Service
  user-service:
    build: 
      context: .
      dockerfile: ./user-service/Dockerfile
    container_name: logistics-user-service
    ports:
      - "8082:8082"
    depends_on:
      - auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT}
      - LOGGING_LEVEL_COM_LOGISTICS=${LOGGING_LEVEL_COM_LOGISTICS}
    networks:
      - logistics-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Transport Service
  transport-service:
    build: 
      context: .
      dockerfile: ./transport-service/Dockerfile
    container_name: logistics-transport-service
    ports:
      - "8083:8083"
    depends_on:
      - auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=production
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
      - SPRING_JPA_HIBERNATE_DDL_AUTO=${SPRING_JPA_HIBERNATE_DDL_AUTO}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=${MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE}
      - LOGGING_LEVEL_ROOT=${LOGGING_LEVEL_ROOT}
      - LOGGING_LEVEL_COM_LOGISTICS=${LOGGING_LEVEL_COM_LOGISTICS}
    networks:
      - logistics-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: logistics-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-digitalocean.conf:/etc/nginx/nginx.conf
    depends_on:
      - gateway-service
    networks:
      - logistics-network
    restart: unless-stopped

networks:
  logistics-network:
    driver: bridge
    name: logistics-network
