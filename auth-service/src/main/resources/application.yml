server:
  port: 8081

spring:
  application:
    name: auth-service
  config:
    import: "configserver:http://localhost:8888"
  datasource:
    url: jdbc:postgresql://localhost:5432/authdb
    username: logistics_user
    password: logistics_pass
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true

# JWT Configuration
jwt:
  secret: mySecretKey123456789012345678901234567890
  expiration: 86400000 # 24 hours in milliseconds
  refresh-expiration: 604800000 # 7 days in milliseconds

# OAuth2 Configuration
spring:
  security:
    oauth2:
      authorizationserver:
        client:
          logistics-client:
            registration:
              client-id: logistics-client
              client-secret: "{noop}logistics-secret"
              client-authentication-methods:
                - client_secret_basic
              authorization-grant-types:
                - authorization_code
                - refresh_token
                - client_credentials
              redirect-uris:
                - http://localhost:8080/login/oauth2/code/logistics-client
              scopes:
                - read
                - write

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always

logging:
  level:
    com.logistics.auth: DEBUG
    org.springframework.security: DEBUG